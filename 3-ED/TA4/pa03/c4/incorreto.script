Script started on 2024-11-04 17:02:52-03:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="139" LINES="31"]
c=c4; gcc -g -o ${c} ${c}.c; valgrind --leak-check=full ./${c}
exit
iamravara@grande:~/Documentos/ED/pa03/c4$ c=c4; gcc -g -o ${c} ${c}.c; valgrind --leak-check=full ./${c}
==119091== Memcheck, a memory error detector
==119091== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==119091== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==119091== Command: ./c4
==119091== 
==119091== Use of uninitialised value of size 8
==119091==    at 0x10917A: main (c4.c:13)
==119091== 
==119091== Invalid write of size 4
==119091==    at 0x10917A: main (c4.c:13)
==119091==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==119091== 
==119091== 
==119091== Process terminating with default action of signal 11 (SIGSEGV)
==119091==  Access not within mapped region at address 0x0
==119091==    at 0x10917A: main (c4.c:13)
==119091==  If you believe this happened as a result of a stack
==119091==  overflow in your program's main thread (unlikely but
==119091==  possible), you can try to increase the size of the
==119091==  main thread stack using the --main-stacksize= flag.
==119091==  The main thread stack size used in this run was 8388608.
==119091== 
==119091== HEAP SUMMARY:
==119091==     in use at exit: 0 bytes in 0 blocks
==119091==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==119091== 
==119091== All heap blocks were freed -- no leaks are possible
==119091== 
==119091== Use --track-origins=yes to see where uninitialised values come from
==119091== For lists of detected and suppressed errors, rerun with: -s
==119091== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Falha de segmentação (imagem do núcleo gravada)
iamravara@grande:~/Documentos/ED/pa03/c4$ exit
exit

Script done on 2024-11-04 17:02:54-03:00 [COMMAND_EXIT_CODE="139"]
