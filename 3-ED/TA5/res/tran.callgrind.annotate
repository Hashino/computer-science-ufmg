--------------------------------------------------------------------------------
Profile data file 'res/callgrind.out' (creator: callgrind-3.24.0)
--------------------------------------------------------------------------------
I1 cache: 32768 B, 64 B, 8-way associative
D1 cache: 32768 B, 64 B, 8-way associative
LL cache: 33554432 B, 64 B, direct-mapped
Timerange: Basic block 0 - 4055729
Trigger: Program termination
Profiled target:  bin/matop -t -x 500 -y 500 (PID 3544940, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                  Dr                  Dw                 I1mr           D1mr             D1mw             ILmr           DLmr           DLmw            
--------------------------------------------------------------------------------
49,792,623 (100.0%) 14,473,831 (100.0%) 5,049,670 (100.0%) 1,280 (100.0%) 134,572 (100.0%) 112,167 (100.0%) 1,251 (100.0%) 1,057 (100.0%) 80,595 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                  Dr                 Dw                 I1mr        D1mr             D1mw            ILmr        DLmr         DLmw             file:function
--------------------------------------------------------------------------------
16,223,040 (32.58%) 4,618,273 (31.91%)   500,007 ( 9.90%) 14 ( 1.09%) 133,066 (98.88%)      0          14 ( 1.12%)   1 ( 0.09%)      .           obj/../src/mat.c:transpoeMatriz [/home/hashino/Documents/cs-ufmg/3-ED/TA5/bin/matop]
10,885,611 (21.86%) 2,561,603 (17.70%) 1,281,603 (25.38%)  1 ( 0.08%)       0          80,001 (71.32%)  1 ( 0.08%)   0          80,000 (99.26%)  obj/../src/mat.c:inicializaMatrizNula [/home/hashino/Documents/cs-ufmg/3-ED/TA5/bin/matop]
 8,000,000 (16.07%) 2,000,000 (13.82%) 1,250,000 (24.75%)  3 ( 0.23%)       1 ( 0.00%)      1 ( 0.00%)  3 ( 0.24%)   1 ( 0.09%)      .           /usr/src/debug/glibc/glibc/stdlib/erand48_r.c:erand48_r [/usr/lib/libc.so.6]
 5,505,521 (11.06%) 2,003,008 (13.84%)   751,006 (14.87%)  3 ( 0.23%)       3 ( 0.00%) 31,501 (28.08%)  3 ( 0.24%)   1 ( 0.09%)      .           obj/../src/mat.c:inicializaMatrizAleatoria [/home/hashino/Documents/cs-ufmg/3-ED/TA5/bin/matop]
 5,000,003 (10.04%) 1,749,998 (12.09%)   500,002 ( 9.90%)  3 ( 0.23%)       1 ( 0.00%)      0           3 ( 0.24%)   .               .           /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c:__drand48_iterate [/usr/lib/libc.so.6]
 4,000,000 ( 8.03%) 1,500,000 (10.36%)   750,000 (14.85%)  1 ( 0.08%)       0               0           1 ( 0.08%)   .               .           /usr/src/debug/glibc/glibc/stdlib/drand48.c:drand48 [/usr/lib/libc.so.6]

--------------------------------------------------------------------------------
-- Auto-annotated source: obj/../src/mat.c
--------------------------------------------------------------------------------
Ir                  Dr                 Dw               I1mr       D1mr             D1mw            ILmr       DLmr       DLmw            

-- line 18 ----------------------------------------
         .                  .                .          .                .               .          .          .               .           #define INITRANDOMRANGE 10
         .                  .                .          .                .               .          .          .               .           // Macro que realiza swap sem variavel auxiliar
         .                  .                .          .                .               .          .          .               .           #define ELEMSWAP(x, y) (x += y, y = x - y, x -= y)
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .           void criaMatriz(mat_tipo *mat, int tx, int ty, int id)
         .                  .                .          .                .               .          .          .               .           // Descricao: cria matriz com dimensoes tx X ty
         .                  .                .          .                .               .          .          .               .           // Entrada: mat, tx, ty, id
         .                  .                .          .                .               .          .          .               .           // Saida: mat
         7 ( 0.00%)         0                5 ( 0.00%) .                .               .          .          .               .           {
         .                  .                .          .                .               .          .          .               .             // verifica se os valores de tx e ty sÃ£o validos
         2 ( 0.00%)         1 ( 0.00%)       .          .                .               .          .          .               .             erroAssert(tx > 0, "Dimensao nula");
         2 ( 0.00%)         1 ( 0.00%)       0          1 ( 0.08%)       0               0          1 ( 0.08%) .               .             erroAssert(ty > 0, "Dimensao nula");
         2 ( 0.00%)         1 ( 0.00%)       0          1 ( 0.08%)       0               0          1 ( 0.08%) .               .             erroAssert(tx <= MAXTAM, "Dimensao maior que permitido");
         2 ( 0.00%)         1 ( 0.00%)       0          1 ( 0.08%)       0               0          1 ( 0.08%) .               .             erroAssert(ty <= MAXTAM, "Dimensao maior que permitido");
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .             // inicializa as dimensoes da matriz
         3 ( 0.00%)         2 ( 0.00%)       1 ( 0.00%) 2 ( 0.16%)       0               1 ( 0.00%) 2 ( 0.16%) 0               1 ( 0.00%)    mat->tamx = tx;
         3 ( 0.00%)         2 ( 0.00%)       1 ( 0.00%) .                .               .          .          .               .             mat->tamy = ty;
         .                  .                .          .                .               .          .          .               .             // inicializa o identificador da matriz, para rastreamento
         3 ( 0.00%)         2 ( 0.00%)       1 ( 0.00%) .                .               .          .          .               .             mat->id = id;
         3 ( 0.00%)         2 ( 0.00%)       .          .                .               .          .          .               .           }
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .           void inicializaMatrizNula(mat_tipo *mat)
         .                  .                .          .                .               .          .          .               .           // Descricao: inicializa mat com valores nulos
         .                  .                .          .                .               .          .          .               .           // Entrada: mat
         .                  .                .          .                .               .          .          .               .           // Saida: mat
         3 ( 0.00%)         0                2 ( 0.00%) .                .               .          .          .               .           {
         .                  .                .          .                .               .          .          .               .             int i, j;
         .                  .                .          .                .               .          .          .               .             // inicializa todos os elementos da matriz com 0, por seguranca
     2,404 ( 0.00%)       801 ( 0.01%)     801 ( 0.02%) 1 ( 0.08%)       0               0          1 ( 0.08%) .               .             for (i = 0; i < MAXTAM; i++) {
 1,923,200 ( 3.86%)   640,800 ( 4.43%) 640,800 (12.69%) .                .               .          .          .               .               for (j = 0; j < MAXTAM; j++) {
 8,960,000 (17.99%) 1,920,000 (13.27%) 640,000 (12.67%) 0                0          80,001 (71.32%) 0          0          80,000 (99.26%)        mat->m[i][j] = 0;
         .                  .                .          .                .               .          .          .               .               }
         .                  .                .          .                .               .          .          .               .             }
         4 ( 0.00%)         2 ( 0.00%)       .          .                .               .          .          .               .           }
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .           void inicializaMatrizAleatoria(mat_tipo *mat)
         .                  .                .          .                .               .          .          .               .           // Descricao: inicializa mat com valores aleatorios
         .                  .                .          .                .               .          .          .               .           // Entrada: mat
         .                  .                .          .                .               .          .          .               .           // Saida: mat
         4 ( 0.00%)         0                2 ( 0.00%) 1 ( 0.08%)       0               0          1 ( 0.08%) .               .           {
         .                  .                .          .                .               .          .          .               .             int i, j;
         .                  .                .          .                .               .          .          .               .             // inicializa a matriz com valores nulos, por seguranca
         3 ( 0.00%)         1 ( 0.00%)       1 ( 0.00%) .                .               .          .          .               .             inicializaMatrizNula(mat);
10,885,611 (21.86%) 2,561,603 (17.70%) 1,281,603 (25.38%) 1 ( 0.08%)       0          80,001 (71.32%) 1 ( 0.08%) 0          80,000 (99.26%)  => obj/../src/mat.c:inicializaMatrizNula (1x)
         .                  .                .          .                .               .          .          .               .             // inicializa a parte alocada da matriz com valores aleatorios
     2,506 ( 0.01%)     1,503 ( 0.01%)     501 ( 0.01%) 1 ( 0.08%)       0               1 ( 0.00%) 1 ( 0.08%) .               .             for (i = 0; i < mat->tamx; i++) {
 1,253,000 ( 2.52%)   751,500 ( 5.19%) 250,500 ( 4.96%) 1 ( 0.08%)       0               0          1 ( 0.08%) .               .               for (j = 0; j < mat->tamy; j++) {
 4,250,004 ( 8.54%) 1,250,002 ( 8.64%) 500,002 ( 9.90%) 0                3 ( 0.00%) 31,500 (28.08%) 0          1 ( 0.09%)      .                 mat->m[i][j] = drand48() * INITRANDOMRANGE;
17,000,003 (34.14%) 5,249,998 (36.27%) 2,500,002 (49.51%) 7 ( 0.55%)       2 ( 0.00%)      1 ( 0.00%) 7 ( 0.56%) 1 ( 0.09%)      .           => /usr/src/debug/glibc/glibc/stdlib/drand48.c:drand48 (250,000x)
       690 ( 0.00%)       244 ( 0.00%)     128 ( 0.00%) 0               53 ( 0.04%)     24 ( 0.02%) 0          5 ( 0.47%)      .           => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
         .                  .                .          .                .               .          .          .               .               }
         .                  .                .          .                .               .          .          .               .             }
         4 ( 0.00%)         2 ( 0.00%)       .          .                .               .          .          .               .           }
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .           double acessaMatriz(mat_tipo *mat)
         .                  .                .          .                .               .          .          .               .           // Descricao: acessa mat para fins de registro de acesso
         .                  .                .          .                .               .          .          .               .           // Entrada: mat
         .                  .                .          .                .               .          .          .               .           // Saida: mat
         .                  .                .          .                .               .          .          .               .           {
         .                  .                .          .                .               .          .          .               .             int i, j;
         .                  .                .          .                .               .          .          .               .             double aux, s = 0.0;
-- line 76 ----------------------------------------
-- line 222 ----------------------------------------
         .                  .                .          .                .               .          .          .               .               }
         .                  .                .          .                .               .          .          .               .             }
         .                  .                .          .                .               .          .          .               .           }
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .           void transpoeMatriz(mat_tipo *a)
         .                  .                .          .                .               .          .          .               .           // Descricao: transpoe a matriz a
         .                  .                .          .                .               .          .          .               .           // Entrada: a
         .                  .                .          .                .               .          .          .               .           // Saida: a
         4 ( 0.00%)         0                2 ( 0.00%) 1 ( 0.08%)       0               0          1 ( 0.08%) .               .           {
         .                  .                .          .                .               .          .          .               .             int i, j, dim;
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .             // determina a maior dimensao entre tamx e tamy
         7 ( 0.00%)         4 ( 0.00%)       1 ( 0.00%) .                .               .          .          .               .             dim = (a->tamx > a->tamy ? a->tamx : a->tamy);
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .             // faz a transposicao como se a matriz fosse quadrada
     2,005 ( 0.00%)     1,002 ( 0.01%)     501 ( 0.01%) 2 ( 0.16%)       0               0          2 ( 0.16%) .               .             for (i = 0; i < dim; i++) {
   502,500 ( 1.01%)   251,000 ( 1.73%) 125,250 ( 2.48%) .                .               .          .          .               .               for (j = i + 1; j < dim; j++) {
14,970,000 (30.06%) 4,116,750 (28.44%) 374,250 ( 7.41%) 7 ( 0.55%) 133,064 (98.88%)      0          7 ( 0.56%) .               .                 ELEMSWAP((a->m[i][j]), (a->m[j][i]));
   374,250 ( 0.75%)   124,750 ( 0.86%)       0          0                1 ( 0.00%)      0          0          1 ( 0.09%)      .                 LEMEMLOG((long int)(&(a->m[i][j])), sizeof(double), a->id);
   374,250 ( 0.75%)   124,750 ( 0.86%)       0          2 ( 0.16%)       0               0          2 ( 0.16%) .               .                 ESCREVEMEMLOG((long int)(&(a->m[i][j])), sizeof(double), a->id);
         .                  .                .          .                .               .          .          .               .               }
         .                  .                .          .                .               .          .          .               .             }
         .                  .                .          .                .               .          .          .               .             // inverte as dimensoes da matriz transposta
        21 ( 0.00%)        15 ( 0.00%)       3 ( 0.00%) 2 ( 0.16%)       1 ( 0.00%)      0          2 ( 0.16%) .               .             ELEMSWAP(a->tamx, a->tamy);
         3 ( 0.00%)         2 ( 0.00%)       .          .                .               .          .          .               .           }
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .           void destroiMatriz(mat_tipo *a)
         .                  .                .          .                .               .          .          .               .           // Descricao: destroi a matriz a, que se torna inacessÃ­vel
         .                  .                .          .                .               .          .          .               .           // Entrada: a
         .                  .                .          .                .               .          .          .               .           // Saida: a
         4 ( 0.00%)         0                2 ( 0.00%) .                .               .          .          .               .           {
         .                  .                .          .                .               .          .          .               .             // apenas um aviso se a matriz for destruida mais de uma vez
         8 ( 0.00%)         4 ( 0.00%)       .          .                .               .          .          .               .             avisoAssert(((a->tamx > 0) && (a->tamy > 0)), "Matriz jÃ¡ foi destruida");
         .                  .                .          .                .               .          .          .               .           
         .                  .                .          .                .               .          .          .               .             // torna as dimensoes invalidas
        10 ( 0.00%)         7 ( 0.00%)       3 ( 0.00%) 2 ( 0.16%)       0               0          2 ( 0.16%) .               .             a->id = a->tamx = a->tamy = -1;
         3 ( 0.00%)         2 ( 0.00%)       .          .                .               .          .          .               .           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c
  /usr/src/debug/glibc/glibc/stdlib/drand48.c
  /usr/src/debug/glibc/glibc/stdlib/erand48_r.c

--------------------------------------------------------------------------------
Ir                  Dr                 Dw                 I1mr        D1mr             D1mw             ILmr        DLmr       DLmw            
--------------------------------------------------------------------------------
32,614,224 (65.50%) 9,182,909 (63.44%) 2,532,629 (50.15%) 25 ( 1.95%) 133,069 (98.88%) 111,503 (99.41%) 25 ( 2.00%) 2 ( 0.19%) 80,001 (99.26%)  events annotated

