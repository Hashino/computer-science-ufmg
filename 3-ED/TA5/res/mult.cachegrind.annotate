--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /bin/cg_annotate res/cachegrind.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         33554432 B, 64 B, direct-mapped
Command:          bin/matop -m -x 500 -y 500
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir____________________ I1mr__________ ILmr__________ Dr____________________ D1mr________________ DLmr__________ Dw__________________ D1mw____________ DLmw____________ 

8,613,510,283 (100.0%) 1,294 (100.0%) 1,266 (100.0%) 2,789,626,613 (100.0%) 129,432,797 (100.0%) 1,313 (100.0%) 135,832,408 (100.0%) 383,449 (100.0%) 240,277 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir__________________________ I1mr___________ ILmr___________ Dr__________________________ D1mr________________________ DLmr__________ Dw________________________ D1mw__________________ DLmw__________________  file:function

< 8,578,831,251 (99.6%, 99.6%) 26 (2.0%, 2.0%) 26 (2.1%, 2.1%) 2,778,584,252 (99.6%, 99.6%) 129,431,062 (100.0%, 100.0%) 2 (0.2%, 0.2%) 130,816,790 (96.3%, 96.3%) 383,008 (99.9%, 99.9%) 239,890 (99.8%, 99.8%)  /home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c:
  8,502,755,534 (98.7%)        12 (0.9%)       12 (0.9%)       2,751,753,517 (98.6%)        129,304,057  (99.9%)         1 (0.1%)       125,250,507 (92.2%)              1  (0.0%)              0                   multiplicaMatrizes
     43,542,444  (0.5%)         1 (0.1%)        1 (0.1%)          12,809,612  (0.5%)                  0                  0                2,563,212  (1.9%)        320,001 (83.5%)        239,888 (99.8%)           inicializaMatrizNula
     22,022,056  (0.3%)         2 (0.2%)        2 (0.2%)          10,014,024  (0.4%)            127,001   (0.1%)         0                2,002,016  (1.5%)              1  (0.0%)              0                   acessaMatriz
     10,511,034  (0.1%)         3 (0.2%)        3 (0.2%)           4,007,012  (0.1%)                  2   (0.0%)         1 (0.1%)         1,001,008  (0.7%)         63,002 (16.4%)              0                   inicializaMatrizAleatoria

<    16,000,000  (0.2%, 99.8%)  3 (0.2%, 2.2%)  3 (0.2%, 2.3%)     4,000,000  (0.1%, 99.7%)           2   (0.0%, 100.0%) 2 (0.2%, 0.3%)   2,500,000  (1.8%, 98.1%)       2  (0.0%, 99.9%)       0  (0.0%, 99.8%)  /usr/src/debug/glibc/glibc/stdlib/erand48_r.c:erand48_r

<    10,000,003  (0.1%, 99.9%)  3 (0.2%, 2.5%)  3 (0.2%, 2.5%)     3,499,998  (0.1%, 99.9%)           2   (0.0%, 100.0%) 0 (0.0%, 0.3%)   1,000,002  (0.7%, 98.9%)       0  (0.0%, 99.9%)       0  (0.0%, 99.8%)  /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c:__drand48_iterate

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir__________________________ I1mr___________ ILmr___________ Dr__________________________ D1mr_______________________ DLmr__________ Dw________________________ D1mw__________________ DLmw__________________  function:file

> 8,502,755,534 (98.7%, 98.7%) 12 (0.9%, 0.9%) 12 (0.9%, 0.9%) 2,751,753,517 (98.6%, 98.6%) 129,304,057 (99.9%,  99.9%) 1 (0.1%, 0.1%) 125,250,507 (92.2%, 92.2%)       1  (0.0%,  0.0%)       0  (0.0%,  0.0%)  multiplicaMatrizes:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>    43,542,444  (0.5%, 99.2%)  1 (0.1%, 1.0%)  1 (0.1%, 1.0%)    12,809,612  (0.5%, 99.1%)           0  (0.0%,  99.9%) 0 (0.0%, 0.1%)   2,563,212  (1.9%, 94.1%) 320,001 (83.5%, 83.5%) 239,888 (99.8%, 99.8%)  inicializaMatrizNula:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>    22,022,056  (0.3%, 99.5%)  2 (0.2%, 1.2%)  2 (0.2%, 1.2%)    10,014,024  (0.4%, 99.5%)     127,001  (0.1%, 100.0%) 0 (0.0%, 0.1%)   2,002,016  (1.5%, 95.6%)       1  (0.0%, 83.5%)       0  (0.0%, 99.8%)  acessaMatriz:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>    16,000,000  (0.2%, 99.7%)  3 (0.2%, 1.4%)  3 (0.2%, 1.4%)     4,000,000  (0.1%, 99.6%)           2  (0.0%, 100.0%) 2 (0.2%, 0.2%)   2,500,000  (1.8%, 97.4%)       2  (0.0%, 83.5%)       0  (0.0%, 99.8%)  erand48_r:/usr/src/debug/glibc/glibc/stdlib/erand48_r.c

>    10,511,034  (0.1%, 99.8%)  3 (0.2%, 1.6%)  3 (0.2%, 1.7%)     4,007,012  (0.1%, 99.7%)           2  (0.0%, 100.0%) 1 (0.1%, 0.3%)   1,001,008  (0.7%, 98.1%)  63,002 (16.4%, 99.9%)       0  (0.0%, 99.8%)  inicializaMatrizAleatoria:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>    10,000,003  (0.1%, 99.9%)  3 (0.2%, 1.9%)  3 (0.2%, 1.9%)     3,499,998  (0.1%, 99.9%)           2  (0.0%, 100.0%) 0 (0.0%, 0.3%)   1,000,002  (0.7%, 98.9%)       0  (0.0%, 99.9%)       0  (0.0%, 99.8%)  __drand48_iterate:/usr/src/debug/glibc/glibc/stdlib/drand48-iter.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c
--------------------------------------------------------------------------------
Ir___________________ I1mr____ ILmr____ Dr___________________ D1mr_______________ DLmr____ Dw_________________ D1mw___________ DLmw___________ 

-- line 18 ----------------------------------------
            .         .        .                    .                   .         .                  .               .               .          #define INITRANDOMRANGE 10
            .         .        .                    .                   .         .                  .               .               .          // Macro que realiza swap sem variavel auxiliar
            .         .        .                    .                   .         .                  .               .               .          #define ELEMSWAP(x, y) (x += y, y = x - y, x -= y)
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void criaMatriz(mat_tipo *mat, int tx, int ty, int id)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: cria matriz com dimensoes tx X ty
            .         .        .                    .                   .         .                  .               .               .          // Entrada: mat, tx, ty, id
            .         .        .                    .                   .         .                  .               .               .          // Saida: mat
           28  (0.0%) 0        0                    0                   0         0                 20  (0.0%)       0               0          {
            .         .        .                    .                   .         .                  .               .               .            // verifica se os valores de tx e ty sÃ£o validos
            8  (0.0%) 0        0                    4  (0.0%)           0         0                  0               0               0            erroAssert(tx > 0, "Dimensao nula");
            8  (0.0%) 1 (0.1%) 1 (0.1%)             4  (0.0%)           0         0                  0               0               0            erroAssert(ty > 0, "Dimensao nula");
            8  (0.0%) 1 (0.1%) 1 (0.1%)             4  (0.0%)           0         0                  0               0               0            erroAssert(tx <= MAXTAM, "Dimensao maior que permitido");
            8  (0.0%) 1 (0.1%) 1 (0.1%)             4  (0.0%)           0         0                  0               0               0            erroAssert(ty <= MAXTAM, "Dimensao maior que permitido");
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .            // inicializa as dimensoes da matriz
           12  (0.0%) 2 (0.2%) 2 (0.2%)             8  (0.0%)           0         0                  4  (0.0%)       3  (0.0%)       2  (0.0%)    mat->tamx = tx;
           12  (0.0%) 0        0                    8  (0.0%)           0         0                  4  (0.0%)       0               0            mat->tamy = ty;
            .         .        .                    .                   .         .                  .               .               .            // inicializa o identificador da matriz, para rastreamento
           12  (0.0%) 0        0                    8  (0.0%)           0         0                  4  (0.0%)       0               0            mat->id = id;
           12  (0.0%) 0        0                    8  (0.0%)           0         0                  0               0               0          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void inicializaMatrizNula(mat_tipo *mat)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: inicializa mat com valores nulos
            .         .        .                    .                   .         .                  .               .               .          // Entrada: mat
            .         .        .                    .                   .         .                  .               .               .          // Saida: mat
           12  (0.0%) 0        0                    0                   0         0                  8  (0.0%)       0               0          {
            .         .        .                    .                   .         .                  .               .               .            int i, j;
            .         .        .                    .                   .         .                  .               .               .            // inicializa todos os elementos da matriz com 0, por seguranca
        9,616  (0.0%) 1 (0.1%) 1 (0.1%)         6,404  (0.0%)           0         0                  4  (0.0%)       0               0            for (i = 0; i < MAXTAM; i++) {
    7,692,800  (0.1%) 0        0            5,123,200  (0.2%)           0         0              3,200  (0.0%)       0               0              for (j = 0; j < MAXTAM; j++) {
   35,840,000  (0.4%) 0        0            7,680,000  (0.3%)           0         0          2,560,000  (1.9%) 320,001 (83.5%) 239,888 (99.8%)        mat->m[i][j] = 0;
            .         .        .                    .                   .         .                  .               .               .              }
            .         .        .                    .                   .         .                  .               .               .            }
           16  (0.0%) 0        0                    8  (0.0%)           0         0                  0               0               0          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void inicializaMatrizAleatoria(mat_tipo *mat)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: inicializa mat com valores aleatorios
            .         .        .                    .                   .         .                  .               .               .          // Entrada: mat
            .         .        .                    .                   .         .                  .               .               .          // Saida: mat
            8  (0.0%) 1 (0.1%) 1 (0.1%)             0                   0         0                  4  (0.0%)       0               0          {
            .         .        .                    .                   .         .                  .               .               .            int i, j;
            .         .        .                    .                   .         .                  .               .               .            // inicializa a matriz com valores nulos, por seguranca
            6  (0.0%) 0        0                    2  (0.0%)           0         0                  2  (0.0%)       0               0            inicializaMatrizNula(mat);
            .         .        .                    .                   .         .                  .               .               .            // inicializa a parte alocada da matriz com valores aleatorios
        5,012  (0.0%) 1 (0.1%) 1 (0.1%)         4,006  (0.0%)           0         0                  2  (0.0%)       2  (0.0%)       0            for (i = 0; i < mat->tamx; i++) {
    2,506,000  (0.0%) 1 (0.1%) 1 (0.1%)     2,003,000  (0.1%)           0         0              1,000  (0.0%)       0               0              for (j = 0; j < mat->tamy; j++) {
    8,000,000  (0.1%) 0        0            2,000,000  (0.1%)           2  (0.0%) 1 (0.1%)   1,000,000  (0.7%)  63,000 (16.4%)       0                mat->m[i][j] = drand48() * INITRANDOMRANGE;
            .         .        .                    .                   .         .                  .               .               .              }
            .         .        .                    .                   .         .                  .               .               .            }
            8  (0.0%) 0        0                    4  (0.0%)           0         0                  0               0               0          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          double acessaMatriz(mat_tipo *mat)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: acessa mat para fins de registro de acesso
            .         .        .                    .                   .         .                  .               .               .          // Entrada: mat
            .         .        .                    .                   .         .                  .               .               .          // Saida: mat
           12  (0.0%) 0        0                    0                   0         0                  8  (0.0%)       1  (0.0%)       0          {
            .         .        .                    .                   .         .                  .               .               .            int i, j;
            8  (0.0%) 0        0                    0                   0         0                  4  (0.0%)       0               0            double aux, s = 0.0;
       10,024  (0.0%) 1 (0.1%) 1 (0.1%)         8,012  (0.0%)           3  (0.0%) 0                  4  (0.0%)       0               0            for (i = 0; i < mat->tamx; i++) {
    5,012,000  (0.1%) 1 (0.1%) 1 (0.1%)     4,006,000  (0.1%)           0         0              2,000  (0.0%)       0               0              for (j = 0; j < mat->tamy; j++) {
   14,000,000  (0.2%) 0        0            4,000,000  (0.1%)     126,998  (0.1%) 0          1,000,000  (0.7%)       0               0                aux = mat->m[i][j];
    3,000,000  (0.0%) 0        0            2,000,000  (0.1%)           0         0          1,000,000  (0.7%)       0               0                s += aux;
            .         .        .                    .                   .         .                  .               .               .              }
            .         .        .                    .                   .         .                  .               .               .            }
            4  (0.0%) 0        0                    4  (0.0%)           0         0                  0               0               0            return s; // apenas para evitar que acesso seja eliminado
            8  (0.0%) 0        0                    8  (0.0%)           0         0                  0               0               0          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void imprimeMatriz(mat_tipo *mat)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: imprime a matriz com a identificacao de linhas e colunas
            .         .        .                    .                   .         .                  .               .               .          // Entrada: mat
            .         .        .                    .                   .         .                  .               .               .          // Saida: impressao na saida padrao (stdout)
            .         .        .                    .                   .         .                  .               .               .          {
            .         .        .                    .                   .         .                  .               .               .            int i, j;
            .         .        .                    .                   .         .                  .               .               .          
-- line 92 ----------------------------------------
-- line 198 ----------------------------------------
            .         .        .                    .                   .         .                  .               .               .              }
            .         .        .                    .                   .         .                  .               .               .            }
            .         .        .                    .                   .         .                  .               .               .          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void multiplicaMatrizes(mat_tipo *a, mat_tipo *b, mat_tipo *c)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: multiplica as matrizes a e b e armazena o resultado em c
            .         .        .                    .                   .         .                  .               .               .          // Entrada: a,b
            .         .        .                    .                   .         .                  .               .               .          // Saida: c
            6  (0.0%) 2 (0.2%) 2 (0.2%)             0                   0         0                  4  (0.0%)       0               0          {
            .         .        .                    .                   .         .                  .               .               .            int i, j, k;
            .         .        .                    .                   .         .                  .               .               .            // verifica a compatibilidade das dimensoes
            6  (0.0%) 0        0                    4  (0.0%)           2  (0.0%) 0                  0               0               0            erroAssert(a->tamy == b->tamx, "Dimensoes incompativeis");
            .         .        .                    .                   .         .                  .               .               .            // cria e inicializa a matriz c
            9  (0.0%) 2 (0.2%) 2 (0.2%)             7  (0.0%)           0         0                  1  (0.0%)       0               0            criaMatriz(c, a->tamx, b->tamy, c->id);
            3  (0.0%) 0        0                    1  (0.0%)           0         0                  1  (0.0%)       0               0            inicializaMatrizNula(c);
            .         .        .                    .                   .         .                  .               .               .            // realiza a multiplicacao de matrizes
        2,506  (0.0%) 1 (0.1%) 1 (0.1%)         2,003  (0.0%)           0         0                  1  (0.0%)       1  (0.0%)       0            for (i = 0; i < c->tamx; i++) {
    1,253,000  (0.0%) 1 (0.1%) 1 (0.1%)     1,001,500  (0.0%)      62,000  (0.0%) 0                500  (0.0%)       0               0              for (j = 0; j < c->tamy; j++) {
  626,500,000  (7.3%) 0        0          500,750,000 (18.0%)           1  (0.0%) 0            250,000  (0.2%)       0               0                for (k = 0; k < a->tamy; k++) {
6,750,000,000 (78.4%) 3 (0.2%) 3 (0.2%) 1,875,000,000 (67.2%) 129,242,053 (99.9%) 0        125,000,000 (92.0%)       0               0                  c->m[i][j] += a->m[i][k] * b->m[k][j];
  375,000,000  (4.4%) 1 (0.1%) 1 (0.1%)   125,000,000  (4.5%)           1  (0.0%) 1 (0.1%)           0               0               0                  LEMEMLOG((long int)(&(a->m[i][k])), sizeof(double), a->id);
  375,000,000  (4.4%) 1 (0.1%) 1 (0.1%)   125,000,000  (4.5%)           0         0                  0               0               0                  LEMEMLOG((long int)(&(b->m[k][j])), sizeof(double), b->id);
  375,000,000  (4.4%) 1 (0.1%) 1 (0.1%)   125,000,000  (4.5%)           0         0                  0               0               0                  ESCREVEMEMLOG((long int)(&(c->m[i][j])), sizeof(double), c->id);
            .         .        .                    .                   .         .                  .               .               .                }
            .         .        .                    .                   .         .                  .               .               .              }
            .         .        .                    .                   .         .                  .               .               .            }
            4  (0.0%) 0        0                    2  (0.0%)           0         0                  0               0               0          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void transpoeMatriz(mat_tipo *a)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: transpoe a matriz a
            .         .        .                    .                   .         .                  .               .               .          // Entrada: a
            .         .        .                    .                   .         .                  .               .               .          // Saida: a
            .         .        .                    .                   .         .                  .               .               .          {
            .         .        .                    .                   .         .                  .               .               .            int i, j, dim;
            .         .        .                    .                   .         .                  .               .               .          
-- line 232 ----------------------------------------
-- line 244 ----------------------------------------
            .         .        .                    .                   .         .                  .               .               .            // inverte as dimensoes da matriz transposta
            .         .        .                    .                   .         .                  .               .               .            ELEMSWAP(a->tamx, a->tamy);
            .         .        .                    .                   .         .                  .               .               .          }
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .          void destroiMatriz(mat_tipo *a)
            .         .        .                    .                   .         .                  .               .               .          // Descricao: destroi a matriz a, que se torna inacessÃ­vel
            .         .        .                    .                   .         .                  .               .               .          // Entrada: a
            .         .        .                    .                   .         .                  .               .               .          // Saida: a
           12  (0.0%) 1 (0.1%) 1 (0.1%)             0                   0         0                  6  (0.0%)       0               0          {
            .         .        .                    .                   .         .                  .               .               .            // apenas um aviso se a matriz for destruida mais de uma vez
           24  (0.0%) 0        0                   12  (0.0%)           2  (0.0%) 0                  0               0               0            avisoAssert(((a->tamx > 0) && (a->tamy > 0)), "Matriz jÃ¡ foi destruida");
            .         .        .                    .                   .         .                  .               .               .          
            .         .        .                    .                   .         .                  .               .               .            // torna as dimensoes invalidas
           30  (0.0%) 2 (0.2%) 2 (0.2%)            21  (0.0%)           0         0                  9  (0.0%)       0               0            a->id = a->tamx = a->tamy = -1;
            9  (0.0%) 0        0                    6  (0.0%)           0         0                  0               0               0          }

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/erand48_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/erand48_r.c

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir___________________ I1mr_________ ILmr_________ Dr___________________ D1mr________________ DLmr_________ Dw_________________ D1mw___________ DLmw___________ 

8,578,831,251 (99.6%)    26  (2.0%)    26  (2.1%) 2,778,584,252 (99.6%) 129,431,062 (100.0%)     2  (0.2%) 130,816,790 (96.3%) 383,008 (99.9%) 239,890 (99.8%)    annotated: files known & above threshold & readable, line numbers known
            0             0             0                     0                   0              0                   0               0               0            annotated: files known & above threshold & readable, line numbers unknown
            0             0             0                     0                   0              0                   0               0               0          unannotated: files known & above threshold & two or more non-identical
   26,000,003  (0.3%)     6  (0.5%)     6  (0.5%)     7,499,998  (0.3%)           4   (0.0%)     2  (0.2%)   3,500,002  (2.6%)       2  (0.0%)       0          unannotated: files known & above threshold & unreadable 
    8,178,793  (0.1%) 1,234 (95.4%) 1,207 (95.3%)     3,042,288  (0.1%)       1,717   (0.0%) 1,304 (99.3%)   1,515,582  (1.1%)     438  (0.1%)     386  (0.2%)  unannotated: files known & below threshold
      500,236  (0.0%)    28  (2.2%)    27  (2.1%)       500,075  (0.0%)          14   (0.0%)     5  (0.4%)          34  (0.0%)       1  (0.0%)       1  (0.0%)  unannotated: files unknown

