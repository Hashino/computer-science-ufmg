--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /bin/cg_annotate res/cachegrind.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         33554432 B, 64 B, direct-mapped
Command:          bin/matop -s -x 500 -y 500
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir__________________ I1mr__________ ILmr__________ Dr_________________ D1mr___________ DLmr__________ Dw________________ D1mw____________ DLmw____________ 

102,238,219 (100.0%) 1,290 (100.0%) 1,261 (100.0%) 32,362,593 (100.0%) 64,741 (100.0%) 1,313 (100.0%) 8,830,388 (100.0%) 415,449 (100.0%) 240,277 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr___________ ILmr___________ Dr_______________________ D1mr_________________ DLmr__________ Dw______________________ D1mw__________________ DLmw__________________  file:function

< 67,559,201 (66.1%, 66.1%) 22 (1.7%, 1.7%) 22 (1.7%, 1.7%) 21,320,232 (65.9%, 65.9%) 63,007 (97.3%, 97.3%) 2 (0.2%, 0.2%) 3,814,774 (43.2%, 43.2%) 415,008 (99.9%, 99.9%) 239,890 (99.8%, 99.8%)  /home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c:
  43,542,444 (42.6%)         1 (0.1%)        1 (0.1%)       12,809,612 (39.6%)             0                0              2,563,212 (29.0%)        320,001 (77.0%)        239,888 (99.8%)           inicializaMatrizNula
  13,505,540 (13.2%)        10 (0.8%)       10 (0.8%)        4,503,521 (13.9%)        63,003 (97.3%)        1 (0.1%)         250,507  (2.8%)         32,002  (7.7%)              0                   somaMatrizes
  10,511,034 (10.3%)         3 (0.2%)        3 (0.2%)        4,007,012 (12.4%)             2  (0.0%)        1 (0.1%)       1,001,008 (11.3%)         63,002 (15.2%)              0                   inicializaMatrizAleatoria

< 16,000,000 (15.6%, 81.7%)  3 (0.2%, 1.9%)  3 (0.2%, 2.0%)  4,000,000 (12.4%, 78.2%)      2  (0.0%, 97.3%) 2 (0.2%, 0.3%) 2,500,000 (28.3%, 71.5%)       2  (0.0%, 99.9%)       0  (0.0%, 99.8%)  /usr/src/debug/glibc/glibc/stdlib/erand48_r.c:erand48_r

< 10,000,003  (9.8%, 91.5%)  3 (0.2%, 2.2%)  3 (0.2%, 2.2%)  3,499,998 (10.8%, 89.1%)      2  (0.0%, 97.3%) 0 (0.0%, 0.3%) 1,000,002 (11.3%, 82.8%)       0  (0.0%, 99.9%)       0  (0.0%, 99.8%)  /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c:__drand48_iterate

<  8,000,000  (7.8%, 99.3%)  1 (0.1%, 2.2%)  1 (0.1%, 2.3%)  3,000,000  (9.3%, 98.3%)      1  (0.0%, 97.3%) 0 (0.0%, 0.3%) 1,500,000 (17.0%, 99.8%)       0  (0.0%, 99.9%)       0  (0.0%, 99.8%)  /usr/src/debug/glibc/glibc/stdlib/drand48.c:drand48

<    500,236  (0.5%, 99.8%) 28 (2.2%, 4.4%) 27 (2.1%, 4.4%)    500,075  (1.5%, 99.9%)     14  (0.0%, 97.4%) 5 (0.4%, 0.7%)        34  (0.0%, 99.8%)       1  (0.0%, 99.9%)       1  (0.0%, 99.8%)  ???:
     500,182  (0.5%)        23 (1.8%)       22 (1.7%)          500,057  (1.5%)            13  (0.0%)        4 (0.3%)              21  (0.0%)              1  (0.0%)              1  (0.0%)           ???

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr___________ ILmr___________ Dr_______________________ D1mr_________________ DLmr__________ Dw______________________ D1mw__________________ DLmw__________________  function:file

> 43,542,444 (42.6%, 42.6%)  1 (0.1%, 0.1%)  1 (0.1%, 0.1%) 12,809,612 (39.6%, 39.6%)      0  (0.0%,  0.0%) 0 (0.0%, 0.0%) 2,563,212 (29.0%, 29.0%) 320,001 (77.0%, 77.0%) 239,888 (99.8%, 99.8%)  inicializaMatrizNula:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

> 16,000,000 (15.6%, 58.2%)  3 (0.2%, 0.3%)  3 (0.2%, 0.3%)  4,000,000 (12.4%, 51.9%)      2  (0.0%,  0.0%) 2 (0.2%, 0.2%) 2,500,000 (28.3%, 57.3%)       2  (0.0%, 77.0%)       0  (0.0%, 99.8%)  erand48_r:/usr/src/debug/glibc/glibc/stdlib/erand48_r.c

> 13,505,540 (13.2%, 71.4%) 10 (0.8%, 1.1%) 10 (0.8%, 1.1%)  4,503,521 (13.9%, 65.9%) 63,003 (97.3%, 97.3%) 1 (0.1%, 0.2%)   250,507  (2.8%, 60.2%)  32,002  (7.7%, 84.7%)       0  (0.0%, 99.8%)  somaMatrizes:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

> 10,511,034 (10.3%, 81.7%)  3 (0.2%, 1.3%)  3 (0.2%, 1.3%)  4,007,012 (12.4%, 78.2%)      2  (0.0%, 97.3%) 1 (0.1%, 0.3%) 1,001,008 (11.3%, 71.5%)  63,002 (15.2%, 99.9%)       0  (0.0%, 99.8%)  inicializaMatrizAleatoria:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

> 10,000,003  (9.8%, 91.5%)  3 (0.2%, 1.6%)  3 (0.2%, 1.6%)  3,499,998 (10.8%, 89.1%)      2  (0.0%, 97.3%) 0 (0.0%, 0.3%) 1,000,002 (11.3%, 82.8%)       0  (0.0%, 99.9%)       0  (0.0%, 99.8%)  __drand48_iterate:/usr/src/debug/glibc/glibc/stdlib/drand48-iter.c

>  8,000,000  (7.8%, 99.3%)  1 (0.1%, 1.6%)  1 (0.1%, 1.7%)  3,000,000  (9.3%, 98.3%)      1  (0.0%, 97.3%) 0 (0.0%, 0.3%) 1,500,000 (17.0%, 99.8%)       0  (0.0%, 99.9%)       0  (0.0%, 99.8%)  drand48:/usr/src/debug/glibc/glibc/stdlib/drand48.c

>    500,182  (0.5%, 99.8%) 23 (1.8%, 3.4%) 22 (1.7%, 3.4%)    500,057  (1.5%, 99.9%)     13  (0.0%, 97.3%) 4 (0.3%, 0.6%)        21  (0.0%, 99.8%)       1  (0.0%, 99.9%)       1  (0.0%, 99.8%)  ???:???

--------------------------------------------------------------------------------
-- Annotated source file: /home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c
--------------------------------------------------------------------------------
Ir________________ I1mr____ ILmr____ Dr_______________ D1mr__________ DLmr____ Dw_______________ D1mw___________ DLmw___________ 

-- line 18 ----------------------------------------
         .         .        .                .              .         .                .               .               .          #define INITRANDOMRANGE 10
         .         .        .                .              .         .                .               .               .          // Macro que realiza swap sem variavel auxiliar
         .         .        .                .              .         .                .               .               .          #define ELEMSWAP(x, y) (x += y, y = x - y, x -= y)
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          void criaMatriz(mat_tipo *mat, int tx, int ty, int id)
         .         .        .                .              .         .                .               .               .          // Descricao: cria matriz com dimensoes tx X ty
         .         .        .                .              .         .                .               .               .          // Entrada: mat, tx, ty, id
         .         .        .                .              .         .                .               .               .          // Saida: mat
        28  (0.0%) 0        0                0              0         0               20  (0.0%)       0               0          {
         .         .        .                .              .         .                .               .               .            // verifica se os valores de tx e ty sÃ£o validos
         8  (0.0%) 0        0                4  (0.0%)      0         0                0               0               0            erroAssert(tx > 0, "Dimensao nula");
         8  (0.0%) 1 (0.1%) 1 (0.1%)         4  (0.0%)      0         0                0               0               0            erroAssert(ty > 0, "Dimensao nula");
         8  (0.0%) 1 (0.1%) 1 (0.1%)         4  (0.0%)      0         0                0               0               0            erroAssert(tx <= MAXTAM, "Dimensao maior que permitido");
         8  (0.0%) 1 (0.1%) 1 (0.1%)         4  (0.0%)      0         0                0               0               0            erroAssert(ty <= MAXTAM, "Dimensao maior que permitido");
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .            // inicializa as dimensoes da matriz
        12  (0.0%) 2 (0.2%) 2 (0.2%)         8  (0.0%)      0         0                4  (0.0%)       3  (0.0%)       2  (0.0%)    mat->tamx = tx;
        12  (0.0%) 0        0                8  (0.0%)      0         0                4  (0.0%)       0               0            mat->tamy = ty;
         .         .        .                .              .         .                .               .               .            // inicializa o identificador da matriz, para rastreamento
        12  (0.0%) 0        0                8  (0.0%)      0         0                4  (0.0%)       0               0            mat->id = id;
        12  (0.0%) 0        0                8  (0.0%)      0         0                0               0               0          }
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          void inicializaMatrizNula(mat_tipo *mat)
         .         .        .                .              .         .                .               .               .          // Descricao: inicializa mat com valores nulos
         .         .        .                .              .         .                .               .               .          // Entrada: mat
         .         .        .                .              .         .                .               .               .          // Saida: mat
        12  (0.0%) 0        0                0              0         0                8  (0.0%)       0               0          {
         .         .        .                .              .         .                .               .               .            int i, j;
         .         .        .                .              .         .                .               .               .            // inicializa todos os elementos da matriz com 0, por seguranca
     9,616  (0.0%) 1 (0.1%) 1 (0.1%)     6,404  (0.0%)      0         0                4  (0.0%)       0               0            for (i = 0; i < MAXTAM; i++) {
 7,692,800  (7.5%) 0        0        5,123,200 (15.8%)      0         0            3,200  (0.0%)       0               0              for (j = 0; j < MAXTAM; j++) {
35,840,000 (35.1%) 0        0        7,680,000 (23.7%)      0         0        2,560,000 (29.0%) 320,001 (77.0%) 239,888 (99.8%)        mat->m[i][j] = 0;
         .         .        .                .              .         .                .               .               .              }
         .         .        .                .              .         .                .               .               .            }
        16  (0.0%) 0        0                8  (0.0%)      0         0                0               0               0          }
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          void inicializaMatrizAleatoria(mat_tipo *mat)
         .         .        .                .              .         .                .               .               .          // Descricao: inicializa mat com valores aleatorios
         .         .        .                .              .         .                .               .               .          // Entrada: mat
         .         .        .                .              .         .                .               .               .          // Saida: mat
         8  (0.0%) 1 (0.1%) 1 (0.1%)         0              0         0                4  (0.0%)       0               0          {
         .         .        .                .              .         .                .               .               .            int i, j;
         .         .        .                .              .         .                .               .               .            // inicializa a matriz com valores nulos, por seguranca
         6  (0.0%) 0        0                2  (0.0%)      0         0                2  (0.0%)       0               0            inicializaMatrizNula(mat);
         .         .        .                .              .         .                .               .               .            // inicializa a parte alocada da matriz com valores aleatorios
     5,012  (0.0%) 1 (0.1%) 1 (0.1%)     4,006  (0.0%)      0         0                2  (0.0%)       2  (0.0%)       0            for (i = 0; i < mat->tamx; i++) {
 2,506,000  (2.5%) 1 (0.1%) 1 (0.1%) 2,003,000  (6.2%)      0         0            1,000  (0.0%)       0               0              for (j = 0; j < mat->tamy; j++) {
 8,000,000  (7.8%) 0        0        2,000,000  (6.2%)      2  (0.0%) 1 (0.1%) 1,000,000 (11.3%)  63,000 (15.2%)       0                mat->m[i][j] = drand48() * INITRANDOMRANGE;
         .         .        .                .              .         .                .               .               .              }
         .         .        .                .              .         .                .               .               .            }
         8  (0.0%) 0        0                4  (0.0%)      0         0                0               0               0          }
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          double acessaMatriz(mat_tipo *mat)
         .         .        .                .              .         .                .               .               .          // Descricao: acessa mat para fins de registro de acesso
         .         .        .                .              .         .                .               .               .          // Entrada: mat
         .         .        .                .              .         .                .               .               .          // Saida: mat
         .         .        .                .              .         .                .               .               .          {
         .         .        .                .              .         .                .               .               .            int i, j;
         .         .        .                .              .         .                .               .               .            double aux, s = 0.0;
-- line 76 ----------------------------------------
-- line 173 ----------------------------------------
         .         .        .                .              .         .                .               .               .              }
         .         .        .                .              .         .                .               .               .            }
         .         .        .                .              .         .                .               .               .          }
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          void somaMatrizes(mat_tipo *a, mat_tipo *b, mat_tipo *c)
         .         .        .                .              .         .                .               .               .          // Descricao: soma as matrizes a e b e armazena o resultado em c
         .         .        .                .              .         .                .               .               .          // Entrada: a, b
         .         .        .                .              .         .                .               .               .          // Saida: c
         6  (0.0%) 1 (0.1%) 1 (0.1%)         0              0         0                4  (0.0%)       1  (0.0%)       0          {
         .         .        .                .              .         .                .               .               .            int i, j;
         .         .        .                .              .         .                .               .               .            // verifica se as dimensoes das matrizes a e b sao as mesmas
         6  (0.0%) 0        0                4  (0.0%)      2  (0.0%) 0                0               0               0            erroAssert(a->tamx == b->tamx, "Dimensoes incompativeis");
         6  (0.0%) 2 (0.2%) 2 (0.2%)         4  (0.0%)      0         0                0               0               0            erroAssert(a->tamy == b->tamy, "Dimensoes incompativeis");
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .            // inicializa a matriz c garantindo a compatibilidade das dimensoes
         9  (0.0%) 1 (0.1%) 1 (0.1%)         7  (0.0%)      0         0                1  (0.0%)       0               0            criaMatriz(c, a->tamx, a->tamy, c->id);
         3  (0.0%) 0        0                1  (0.0%)      0         0                1  (0.0%)       0               0            inicializaMatrizNula(c);
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .            // faz a soma elemento a elemento
     2,506  (0.0%) 2 (0.2%) 2 (0.2%)     2,003  (0.0%)      1  (0.0%) 0                1  (0.0%)       1  (0.0%)       0            for (i = 0; i < a->tamx; i++) {
 1,253,000  (1.2%) 0        0        1,001,500  (3.1%)      0         0              500  (0.0%)       0               0              for (j = 0; j < a->tamy; j++) {
10,000,000  (9.8%) 2 (0.2%) 2 (0.2%) 2,750,000  (8.5%) 62,999 (97.3%) 0          250,000  (2.8%)  32,000  (7.7%)       0                c->m[i][j] = a->m[i][j] + b->m[i][j];
   750,000  (0.7%) 0        0          250,000  (0.8%)      1  (0.0%) 1 (0.1%)         0               0               0                LEMEMLOG((long int)(&(a->m[i][j])), sizeof(double), a->id);
   750,000  (0.7%) 1 (0.1%) 1 (0.1%)   250,000  (0.8%)      0         0                0               0               0                LEMEMLOG((long int)(&(b->m[i][j])), sizeof(double), b->id);
   750,000  (0.7%) 1 (0.1%) 1 (0.1%)   250,000  (0.8%)      0         0                0               0               0                ESCREVEMEMLOG((long int)(&(c->m[i][j])), sizeof(double), c->id);
         .         .        .                .              .         .                .               .               .              }
         .         .        .                .              .         .                .               .               .            }
         4  (0.0%) 0        0                2  (0.0%)      0         0                0               0               0          }
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          void multiplicaMatrizes(mat_tipo *a, mat_tipo *b, mat_tipo *c)
         .         .        .                .              .         .                .               .               .          // Descricao: multiplica as matrizes a e b e armazena o resultado em c
         .         .        .                .              .         .                .               .               .          // Entrada: a,b
         .         .        .                .              .         .                .               .               .          // Saida: c
         .         .        .                .              .         .                .               .               .          {
         .         .        .                .              .         .                .               .               .            int i, j, k;
         .         .        .                .              .         .                .               .               .            // verifica a compatibilidade das dimensoes
-- line 208 ----------------------------------------
-- line 244 ----------------------------------------
         .         .        .                .              .         .                .               .               .            // inverte as dimensoes da matriz transposta
         .         .        .                .              .         .                .               .               .            ELEMSWAP(a->tamx, a->tamy);
         .         .        .                .              .         .                .               .               .          }
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .          void destroiMatriz(mat_tipo *a)
         .         .        .                .              .         .                .               .               .          // Descricao: destroi a matriz a, que se torna inacessÃ­vel
         .         .        .                .              .         .                .               .               .          // Entrada: a
         .         .        .                .              .         .                .               .               .          // Saida: a
        12  (0.0%) 1 (0.1%) 1 (0.1%)         0              0         0                6  (0.0%)       0               0          {
         .         .        .                .              .         .                .               .               .            // apenas um aviso se a matriz for destruida mais de uma vez
        24  (0.0%) 0        0               12  (0.0%)      2  (0.0%) 0                0               0               0            avisoAssert(((a->tamx > 0) && (a->tamy > 0)), "Matriz jÃ¡ foi destruida");
         .         .        .                .              .         .                .               .               .          
         .         .        .                .              .         .                .               .               .            // torna as dimensoes invalidas
        30  (0.0%) 2 (0.2%) 2 (0.2%)        21  (0.0%)      0         0                9  (0.0%)       0               0            a->id = a->tamx = a->tamy = -1;
         9  (0.0%) 0        0                6  (0.0%)      0         0                0               0               0          }

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/drand48.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/drand48.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/erand48_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/erand48_r.c

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir________________ I1mr_________ ILmr_________ Dr________________ D1mr__________ DLmr_________ Dw_______________ D1mw___________ DLmw___________ 

67,559,201 (66.1%)    22  (1.7%)    22  (1.7%) 21,320,232 (65.9%) 63,007 (97.3%)     2  (0.2%) 3,814,774 (43.2%) 415,008 (99.9%) 239,890 (99.8%)    annotated: files known & above threshold & readable, line numbers known
         0             0             0                  0              0             0                 0               0               0            annotated: files known & above threshold & readable, line numbers unknown
         0             0             0                  0              0             0                 0               0               0          unannotated: files known & above threshold & two or more non-identical
34,000,003 (33.3%)     7  (0.5%)     7  (0.6%) 10,499,998 (32.4%)      5  (0.0%)     2  (0.2%) 5,000,002 (56.6%)       2  (0.0%)       0          unannotated: files known & above threshold & unreadable 
   178,779  (0.2%) 1,233 (95.6%) 1,205 (95.6%)     42,288  (0.1%)  1,715  (2.6%) 1,304 (99.3%)    15,578  (0.2%)     438  (0.1%)     386  (0.2%)  unannotated: files known & below threshold
   500,236  (0.5%)    28  (2.2%)    27  (2.1%)    500,075  (1.5%)     14  (0.0%)     5  (0.4%)        34  (0.0%)       1  (0.0%)       1  (0.0%)  unannotated: files unknown

