--------------------------------------------------------------------------------
Profile data file 'res/callgrind.out' (creator: callgrind-3.24.0)
--------------------------------------------------------------------------------
I1 cache: 32768 B, 64 B, 8-way associative
D1 cache: 32768 B, 64 B, 8-way associative
LL cache: 33554432 B, 64 B, direct-mapped
Timerange: Basic block 0 - 509866741
Trigger: Program termination
Profiled target:  bin/matop -m -x 500 -y 500 (PID 3535707, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw
Thresholds:       99 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     Dr                     Dw                   I1mr           D1mr                 D1mw             ILmr           DLmr           DLmw             
--------------------------------------------------------------------------------
8,613,509,699 (100.0%) 2,660,308,480 (100.0%) 265,150,543 (100.0%) 1,283 (100.0%) 129,432,574 (100.0%) 383,672 (100.0%) 1,255 (100.0%) 1,100 (100.0%) 240,490 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     Dr                     Dw                   I1mr        D1mr                 D1mw             ILmr        DLmr         DLmw              file:function
--------------------------------------------------------------------------------
8,502,755,534 (98.71%) 2,626,503,017 (98.73%) 250,501,007 (94.48%) 12 ( 0.94%) 129,304,057 (99.90%)       1 ( 0.00%) 12 ( 0.96%)   1 ( 0.09%)       .           obj/../src/mat.c:multiplicaMatrizes [/home/hashino/Documents/cs-ufmg/3-ED/TA5/bin/matop]
   43,542,444 ( 0.51%)    10,246,412 ( 0.39%)   5,126,412 ( 1.93%)  1 ( 0.08%)           0          320,001 (83.40%)  1 ( 0.08%)   0          239,888 (99.75%)  obj/../src/mat.c:inicializaMatrizNula [/home/hashino/Documents/cs-ufmg/3-ED/TA5/bin/matop]

--------------------------------------------------------------------------------
-- Auto-annotated source: obj/../src/mat.c
--------------------------------------------------------------------------------
Ir                     Dr                     Dw                   I1mr       D1mr                 D1mw             ILmr       DLmr       DLmw             

-- line 18 ----------------------------------------
            .                      .                    .          .                    .                .          .          .                .           #define INITRANDOMRANGE 10
            .                      .                    .          .                    .                .          .          .                .           // Macro que realiza swap sem variavel auxiliar
            .                      .                    .          .                    .                .          .          .                .           #define ELEMSWAP(x, y) (x += y, y = x - y, x -= y)
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void criaMatriz(mat_tipo *mat, int tx, int ty, int id)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: cria matriz com dimensoes tx X ty
            .                      .                    .          .                    .                .          .          .                .           // Entrada: mat, tx, ty, id
            .                      .                    .          .                    .                .          .          .                .           // Saida: mat
           28 ( 0.00%)             0                   20 ( 0.00%) .                    .                .          .          .                .           {
            .                      .                    .          .                    .                .          .          .                .             // verifica se os valores de tx e ty sÃ£o validos
            8 ( 0.00%)             4 ( 0.00%)           .          .                    .                .          .          .                .             erroAssert(tx > 0, "Dimensao nula");
            8 ( 0.00%)             4 ( 0.00%)           0          1 ( 0.08%)           0                0          1 ( 0.08%) .                .             erroAssert(ty > 0, "Dimensao nula");
            8 ( 0.00%)             4 ( 0.00%)           0          1 ( 0.08%)           0                0          1 ( 0.08%) .                .             erroAssert(tx <= MAXTAM, "Dimensao maior que permitido");
            8 ( 0.00%)             4 ( 0.00%)           0          1 ( 0.08%)           0                0          1 ( 0.08%) .                .             erroAssert(ty <= MAXTAM, "Dimensao maior que permitido");
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .             // inicializa as dimensoes da matriz
           12 ( 0.00%)             8 ( 0.00%)           4 ( 0.00%) 2 ( 0.16%)           0                3 ( 0.00%) 2 ( 0.16%) 0                2 ( 0.00%)    mat->tamx = tx;
           12 ( 0.00%)             8 ( 0.00%)           4 ( 0.00%) .                    .                .          .          .                .             mat->tamy = ty;
            .                      .                    .          .                    .                .          .          .                .             // inicializa o identificador da matriz, para rastreamento
           12 ( 0.00%)             8 ( 0.00%)           4 ( 0.00%) .                    .                .          .          .                .             mat->id = id;
           12 ( 0.00%)             8 ( 0.00%)           .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void inicializaMatrizNula(mat_tipo *mat)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: inicializa mat com valores nulos
            .                      .                    .          .                    .                .          .          .                .           // Entrada: mat
            .                      .                    .          .                    .                .          .          .                .           // Saida: mat
           12 ( 0.00%)             0                    8 ( 0.00%) .                    .                .          .          .                .           {
            .                      .                    .          .                    .                .          .          .                .             int i, j;
            .                      .                    .          .                    .                .          .          .                .             // inicializa todos os elementos da matriz com 0, por seguranca
        9,616 ( 0.00%)         3,204 ( 0.00%)       3,204 ( 0.00%) 1 ( 0.08%)           0                0          1 ( 0.08%) .                .             for (i = 0; i < MAXTAM; i++) {
    7,692,800 ( 0.09%)     2,563,200 ( 0.10%)   2,563,200 ( 0.97%) .                    .                .          .          .                .               for (j = 0; j < MAXTAM; j++) {
   35,840,000 ( 0.42%)     7,680,000 ( 0.29%)   2,560,000 ( 0.97%) 0                    0          320,001 (83.40%) 0          0          239,888 (99.75%)        mat->m[i][j] = 0;
            .                      .                    .          .                    .                .          .          .                .               }
            .                      .                    .          .                    .                .          .          .                .             }
           16 ( 0.00%)             8 ( 0.00%)           .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void inicializaMatrizAleatoria(mat_tipo *mat)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: inicializa mat com valores aleatorios
            .                      .                    .          .                    .                .          .          .                .           // Entrada: mat
            .                      .                    .          .                    .                .          .          .                .           // Saida: mat
            8 ( 0.00%)             0                    4 ( 0.00%) 1 ( 0.08%)           0                0          1 ( 0.08%) .                .           {
            .                      .                    .          .                    .                .          .          .                .             int i, j;
            .                      .                    .          .                    .                .          .          .                .             // inicializa a matriz com valores nulos, por seguranca
            6 ( 0.00%)             2 ( 0.00%)           2 ( 0.00%) .                    .                .          .          .                .             inicializaMatrizNula(mat);
   21,771,222 ( 0.25%)     5,123,206 ( 0.19%)   2,563,206 ( 0.97%) 1 ( 0.08%)           0          160,001 (41.70%) 1 ( 0.08%) 0          159,999 (66.53%)  => obj/../src/mat.c:inicializaMatrizNula (2x)
            .                      .                    .          .                    .                .          .          .                .             // inicializa a parte alocada da matriz com valores aleatorios
        5,012 ( 0.00%)         3,006 ( 0.00%)       1,002 ( 0.00%) 1 ( 0.08%)           0                2 ( 0.00%) 1 ( 0.08%) .                .             for (i = 0; i < mat->tamx; i++) {
    2,506,000 ( 0.03%)     1,503,000 ( 0.06%)     501,000 ( 0.19%) 1 ( 0.08%)           0                0          1 ( 0.08%) .                .               for (j = 0; j < mat->tamy; j++) {
    8,500,004 ( 0.10%)     2,500,002 ( 0.09%)   1,000,002 ( 0.38%) 0                    5 ( 0.00%)  63,000 (16.42%) 0          1 ( 0.09%)       .                 mat->m[i][j] = drand48() * INITRANDOMRANGE;
   34,000,003 ( 0.39%)    10,499,998 ( 0.39%)   5,000,002 ( 1.89%) 7 ( 0.55%)           5 ( 0.00%)       2 ( 0.00%) 7 ( 0.56%) 2 ( 0.18%)       .           => /usr/src/debug/glibc/glibc/stdlib/drand48.c:drand48 (500,000x)
          690 ( 0.00%)           244 ( 0.00%)         128 ( 0.00%) 0                   53 ( 0.00%)      24 ( 0.01%) 0          5 ( 0.45%)       .           => /usr/src/debug/glibc/glibc/elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
            .                      .                    .          .                    .                .          .          .                .               }
            .                      .                    .          .                    .                .          .          .                .             }
            8 ( 0.00%)             4 ( 0.00%)           .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           double acessaMatriz(mat_tipo *mat)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: acessa mat para fins de registro de acesso
            .                      .                    .          .                    .                .          .          .                .           // Entrada: mat
            .                      .                    .          .                    .                .          .          .                .           // Saida: mat
           12 ( 0.00%)             0                    8 ( 0.00%) 0                    0                1 ( 0.00%) .          .                .           {
            .                      .                    .          .                    .                .          .          .                .             int i, j;
            8 ( 0.00%)             0                    4 ( 0.00%) .                    .                .          .          .                .             double aux, s = 0.0;
       10,024 ( 0.00%)         6,012 ( 0.00%)       2,004 ( 0.00%) 1 ( 0.08%)           3 ( 0.00%)       0          1 ( 0.08%) .                .             for (i = 0; i < mat->tamx; i++) {
    5,012,000 ( 0.06%)     3,006,000 ( 0.11%)   1,002,000 ( 0.38%) 1 ( 0.08%)           0                0          1 ( 0.08%) .                .               for (j = 0; j < mat->tamy; j++) {
   14,000,000 ( 0.16%)     4,000,000 ( 0.15%)   1,000,000 ( 0.38%) 0              126,998 ( 0.10%)       .          .          .                .                 aux = mat->m[i][j];
    3,000,000 ( 0.03%)     2,000,000 ( 0.08%)   1,000,000 ( 0.38%) .                    .                .          .          .                .                 s += aux;
            .                      .                    .          .                    .                .          .          .                .               }
            .                      .                    .          .                    .                .          .          .                .             }
            4 ( 0.00%)             4 ( 0.00%)           .          .                    .                .          .          .                .             return s; // apenas para evitar que acesso seja eliminado
            8 ( 0.00%)             8 ( 0.00%)           .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void imprimeMatriz(mat_tipo *mat)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: imprime a matriz com a identificacao de linhas e colunas
            .                      .                    .          .                    .                .          .          .                .           // Entrada: mat
            .                      .                    .          .                    .                .          .          .                .           // Saida: impressao na saida padrao (stdout)
            .                      .                    .          .                    .                .          .          .                .           {
            .                      .                    .          .                    .                .          .          .                .             int i, j;
            .                      .                    .          .                    .                .          .          .                .           
-- line 92 ----------------------------------------
-- line 198 ----------------------------------------
            .                      .                    .          .                    .                .          .          .                .               }
            .                      .                    .          .                    .                .          .          .                .             }
            .                      .                    .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void multiplicaMatrizes(mat_tipo *a, mat_tipo *b, mat_tipo *c)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: multiplica as matrizes a e b e armazena o resultado em c
            .                      .                    .          .                    .                .          .          .                .           // Entrada: a,b
            .                      .                    .          .                    .                .          .          .                .           // Saida: c
            6 ( 0.00%)             0                    4 ( 0.00%) 2 ( 0.16%)           0                0          2 ( 0.16%) .                .           {
            .                      .                    .          .                    .                .          .          .                .             int i, j, k;
            .                      .                    .          .                    .                .          .          .                .             // verifica a compatibilidade das dimensoes
            6 ( 0.00%)             4 ( 0.00%)           0          0                    2 ( 0.00%)       .          .          .                .             erroAssert(a->tamy == b->tamx, "Dimensoes incompativeis");
            .                      .                    .          .                    .                .          .          .                .             // cria e inicializa a matriz c
            9 ( 0.00%)             7 ( 0.00%)           1 ( 0.00%) 2 ( 0.16%)           0                0          2 ( 0.16%) .                .             criaMatriz(c, a->tamx, b->tamy, c->id);
           27 ( 0.00%)            12 ( 0.00%)           8 ( 0.00%) .                    .                .          .          .                .           => obj/../src/mat.c:criaMatriz (1x)
            3 ( 0.00%)             1 ( 0.00%)           1 ( 0.00%) .                    .                .          .          .                .             inicializaMatrizNula(c);
   10,885,611 ( 0.13%)     2,561,603 ( 0.10%)   1,281,603 ( 0.48%) 0                    0           80,000 (20.85%) .          .                .           => obj/../src/mat.c:inicializaMatrizNula (1x)
            .                      .                    .          .                    .                .          .          .                .             // realiza a multiplicacao de matrizes
        2,506 ( 0.00%)         1,503 ( 0.00%)         501 ( 0.00%) 1 ( 0.08%)           0                1 ( 0.00%) 1 ( 0.08%) .                .             for (i = 0; i < c->tamx; i++) {
    1,253,000 ( 0.01%)       751,500 ( 0.03%)     250,500 ( 0.09%) 1 ( 0.08%)      62,000 ( 0.05%)       0          1 ( 0.08%) .                .               for (j = 0; j < c->tamy; j++) {
  626,500,000 ( 7.27%)   375,750,000 (14.12%) 125,250,000 (47.24%) 0                    1 ( 0.00%)       .          .          .                .                 for (k = 0; k < a->tamy; k++) {
6,750,000,000 (78.37%) 1,875,000,000 (70.48%) 125,000,000 (47.14%) 3 ( 0.23%) 129,242,053 (99.85%)       0          3 ( 0.24%) .                .                   c->m[i][j] += a->m[i][k] * b->m[k][j];
  375,000,000 ( 4.35%)   125,000,000 ( 4.70%)           0          1 ( 0.08%)           1 ( 0.00%)       0          1 ( 0.08%) 1 ( 0.09%)       .                   LEMEMLOG((long int)(&(a->m[i][k])), sizeof(double), a->id);
  375,000,000 ( 4.35%)   125,000,000 ( 4.70%)           0          1 ( 0.08%)           0                0          1 ( 0.08%) .                .                   LEMEMLOG((long int)(&(b->m[k][j])), sizeof(double), b->id);
  375,000,000 ( 4.35%)   125,000,000 ( 4.70%)           0          1 ( 0.08%)           0                0          1 ( 0.08%) .                .                   ESCREVEMEMLOG((long int)(&(c->m[i][j])), sizeof(double), c->id);
            .                      .                    .          .                    .                .          .          .                .                 }
            .                      .                    .          .                    .                .          .          .                .               }
            .                      .                    .          .                    .                .          .          .                .             }
            4 ( 0.00%)             2 ( 0.00%)           .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void transpoeMatriz(mat_tipo *a)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: transpoe a matriz a
            .                      .                    .          .                    .                .          .          .                .           // Entrada: a
            .                      .                    .          .                    .                .          .          .                .           // Saida: a
            .                      .                    .          .                    .                .          .          .                .           {
            .                      .                    .          .                    .                .          .          .                .             int i, j, dim;
            .                      .                    .          .                    .                .          .          .                .           
-- line 232 ----------------------------------------
-- line 244 ----------------------------------------
            .                      .                    .          .                    .                .          .          .                .             // inverte as dimensoes da matriz transposta
            .                      .                    .          .                    .                .          .          .                .             ELEMSWAP(a->tamx, a->tamy);
            .                      .                    .          .                    .                .          .          .                .           }
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .           void destroiMatriz(mat_tipo *a)
            .                      .                    .          .                    .                .          .          .                .           // Descricao: destroi a matriz a, que se torna inacessÃ­vel
            .                      .                    .          .                    .                .          .          .                .           // Entrada: a
            .                      .                    .          .                    .                .          .          .                .           // Saida: a
           12 ( 0.00%)             0                    6 ( 0.00%) 1 ( 0.08%)           0                0          1 ( 0.08%) .                .           {
            .                      .                    .          .                    .                .          .          .                .             // apenas um aviso se a matriz for destruida mais de uma vez
           24 ( 0.00%)            12 ( 0.00%)           0          0                    2 ( 0.00%)       .          .          .                .             avisoAssert(((a->tamx > 0) && (a->tamy > 0)), "Matriz jÃ¡ foi destruida");
            .                      .                    .          .                    .                .          .          .                .           
            .                      .                    .          .                    .                .          .          .                .             // torna as dimensoes invalidas
           30 ( 0.00%)            21 ( 0.00%)           9 ( 0.00%) 2 ( 0.16%)           0                0          2 ( 0.16%) .                .             a->id = a->tamx = a->tamy = -1;
            9 ( 0.00%)             6 ( 0.00%)           .          .                    .                .          .          .                .           }

--------------------------------------------------------------------------------
Ir                     Dr                     Dw                   I1mr        D1mr                 D1mw             ILmr        DLmr       DLmw             
--------------------------------------------------------------------------------
8,579,331,255 (99.60%) 2,649,767,554 (99.60%) 260,133,492 (98.11%) 26 ( 2.03%) 129,431,065 (100.0%) 383,008 (99.83%) 26 ( 2.07%) 2 ( 0.18%) 239,890 (99.75%)  events annotated

