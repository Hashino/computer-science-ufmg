--------------------------------------------------------------------------------
-- Metadata
--------------------------------------------------------------------------------
Invocation:       /bin/cg_annotate res/cachegrind.out
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         33554432 B, 64 B, direct-mapped
Command:          bin/matop -t -x 500 -y 500
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Threshold:        0.1%
Annotation:       on

--------------------------------------------------------------------------------
-- Summary
--------------------------------------------------------------------------------
Ir_________________ I1mr__________ ILmr__________ Dr_________________ D1mr__________ DLmr__________ Dw________________ D1mw____________ DLmw___________ 

34,074,706 (100.0%) 1,280 (100.0%) 1,252 (100.0%) 11,125,564 (100.0%) 1,727 (100.0%) 1,266 (100.0%) 3,657,435 (100.0%) 111,943 (100.0%) 80,385 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
-- File:function summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr___________ ILmr___________ Dr______________________ D1mr______________ DLmr______________ Dw______________________ D1mw__________________ DLmw_________________  file:function

< 16,645,719 (48.9%, 48.9%) 15 (1.2%, 1.2%) 15 (1.2%, 1.2%) 5,583,207 (50.2%, 50.2%)   1  (0.1%,  0.1%)   1  (0.1%,  0.1%) 1,141,827 (31.2%, 31.2%) 111,503 (99.6%, 99.6%) 80,001 (99.5%, 99.5%)  /home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c:
  10,885,611 (31.9%)         1 (0.1%)        1 (0.1%)       3,202,403 (28.8%)          0                  0                  640,803 (17.5%)         80,001 (71.5%)        80,000 (99.5%)           inicializaMatrizNula
   5,255,517 (15.4%)         3 (0.2%)        3 (0.2%)       2,003,506 (18.0%)          1  (0.1%)          1  (0.1%)          500,504 (13.7%)         31,501 (28.1%)             0                   inicializaMatrizAleatoria
     504,539  (1.5%)         4 (0.3%)        4 (0.3%)         377,273  (3.4%)          0                  0                      507  (0.0%)              0                     0                   transpoeMatriz

<  8,000,000 (23.5%, 72.3%)  3 (0.2%, 1.4%)  3 (0.2%, 1.4%) 2,000,000 (18.0%, 68.2%)   1  (0.1%,  0.1%)   1  (0.1%,  0.2%) 1,250,000 (34.2%, 65.4%)       1  (0.0%, 99.6%)      0  (0.0%, 99.5%)  /usr/src/debug/glibc/glibc/stdlib/erand48_r.c:erand48_r

<  5,000,003 (14.7%, 87.0%)  3 (0.2%, 1.6%)  3 (0.2%, 1.7%) 1,749,998 (15.7%, 83.9%)   1  (0.1%,  0.2%)   0  (0.0%,  0.2%)   500,002 (13.7%, 79.1%)       0  (0.0%, 99.6%)      0  (0.0%, 99.5%)  /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c:__drand48_iterate

<  4,000,000 (11.7%, 98.7%)  1 (0.1%, 1.7%)  1 (0.1%, 1.8%) 1,500,000 (13.5%, 97.4%)   0  (0.0%,  0.2%)   0  (0.0%,  0.2%)   750,000 (20.5%, 99.6%)       0  (0.0%, 99.6%)      0  (0.0%, 99.5%)  /usr/src/debug/glibc/glibc/stdlib/drand48.c:drand48

<    250,236  (0.7%, 99.5%) 29 (2.3%, 4.0%) 28 (2.2%, 4.0%)   250,075  (2.2%, 99.6%)  13  (0.8%,  0.9%)   0  (0.0%,  0.2%)        34  (0.0%, 99.6%)       1  (0.0%, 99.6%)      1  (0.0%, 99.5%)  ???:
     250,182  (0.7%)        24 (1.9%)       23 (1.8%)         250,057  (2.2%)         12  (0.7%)          0                       21  (0.0%)              1  (0.0%)             1  (0.0%)           ???

<     58,653  (0.2%, 99.6%) 33 (2.6%, 6.6%) 33 (2.6%, 6.6%)    18,156  (0.2%, 99.8%) 365 (21.1%, 22.1%) 264 (20.9%, 21.0%)     8,190  (0.2%, 99.8%)      26  (0.0%, 99.6%)     14  (0.0%, 99.5%)  /usr/src/debug/glibc/glibc/elf/dl-lookup.c:
      37,408  (0.1%)        14 (1.1%)       14 (1.1%)          11,723  (0.1%)        267 (15.5%)        205 (16.2%)            4,186  (0.1%)             10  (0.0%)             7  (0.0%)           do_lookup_x

--------------------------------------------------------------------------------
-- Function:file summary
--------------------------------------------------------------------------------
  Ir_______________________ I1mr___________ ILmr___________ Dr______________________ D1mr______________ DLmr______________ Dw______________________ D1mw_________________ DLmw_________________  function:file

> 10,885,611 (31.9%, 31.9%)  1 (0.1%, 0.1%)  1 (0.1%, 0.1%) 3,202,403 (28.8%, 28.8%)   0  (0.0%,  0.0%)   0  (0.0%,  0.0%)   640,803 (17.5%, 17.5%) 80,001 (71.5%, 71.5%) 80,000 (99.5%, 99.5%)  inicializaMatrizNula:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>  8,000,000 (23.5%, 55.4%)  3 (0.2%, 0.3%)  3 (0.2%, 0.3%) 2,000,000 (18.0%, 46.8%)   1  (0.1%,  0.1%)   1  (0.1%,  0.1%) 1,250,000 (34.2%, 51.7%)      1  (0.0%, 71.5%)      0  (0.0%, 99.5%)  erand48_r:/usr/src/debug/glibc/glibc/stdlib/erand48_r.c

>  5,255,517 (15.4%, 70.8%)  3 (0.2%, 0.5%)  3 (0.2%, 0.6%) 2,003,506 (18.0%, 64.8%)   1  (0.1%,  0.1%)   1  (0.1%,  0.2%)   500,504 (13.7%, 65.4%) 31,501 (28.1%, 99.6%)      0  (0.0%, 99.5%)  inicializaMatrizAleatoria:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>  5,000,003 (14.7%, 85.5%)  3 (0.2%, 0.8%)  3 (0.2%, 0.8%) 1,749,998 (15.7%, 80.5%)   1  (0.1%,  0.2%)   0  (0.0%,  0.2%)   500,002 (13.7%, 79.1%)      0  (0.0%, 99.6%)      0  (0.0%, 99.5%)  __drand48_iterate:/usr/src/debug/glibc/glibc/stdlib/drand48-iter.c

>  4,000,000 (11.7%, 97.3%)  1 (0.1%, 0.9%)  1 (0.1%, 0.9%) 1,500,000 (13.5%, 94.0%)   0  (0.0%,  0.2%)   0  (0.0%,  0.2%)   750,000 (20.5%, 99.6%)      0  (0.0%, 99.6%)      0  (0.0%, 99.5%)  drand48:/usr/src/debug/glibc/glibc/stdlib/drand48.c

>    504,539  (1.5%, 98.7%)  4 (0.3%, 1.2%)  4 (0.3%, 1.2%)   377,273  (3.4%, 97.4%)   0  (0.0%,  0.2%)   0  (0.0%,  0.2%)       507  (0.0%, 99.6%)      0  (0.0%, 99.6%)      0  (0.0%, 99.5%)  transpoeMatriz:/home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c

>    250,182  (0.7%, 99.5%) 24 (1.9%, 3.0%) 23 (1.8%, 3.0%)   250,057  (2.2%, 99.6%)  12  (0.7%,  0.9%)   0  (0.0%,  0.2%)        21  (0.0%, 99.6%)      1  (0.0%, 99.6%)      1  (0.0%, 99.5%)  ???:???

>     38,535  (0.1%, 99.6%) 15 (1.2%, 4.2%) 15 (1.2%, 4.2%)    11,979  (0.1%, 99.7%) 267 (15.5%, 16.3%) 205 (16.2%, 16.4%)     4,319  (0.1%, 99.7%)     10  (0.0%, 99.6%)      7  (0.0%, 99.5%)  do_lookup_x:
      37,408  (0.1%)        14 (1.1%)       14 (1.1%)          11,723  (0.1%)        267 (15.5%)        205 (16.2%)            4,186  (0.1%)            10  (0.0%)             7  (0.0%)           /usr/src/debug/glibc/glibc/elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: /home/hashino/Documents/cs-ufmg/3-ED/TA5/obj/../src/mat.c
--------------------------------------------------------------------------------
Ir_______________ I1mr____ ILmr____ Dr_______________ D1mr____ DLmr____ Dw_____________ D1mw__________ DLmw__________ 

-- line 18 ----------------------------------------
        .         .        .                .         .        .              .              .              .          #define INITRANDOMRANGE 10
        .         .        .                .         .        .              .              .              .          // Macro que realiza swap sem variavel auxiliar
        .         .        .                .         .        .              .              .              .          #define ELEMSWAP(x, y) (x += y, y = x - y, x -= y)
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .          void criaMatriz(mat_tipo *mat, int tx, int ty, int id)
        .         .        .                .         .        .              .              .              .          // Descricao: cria matriz com dimensoes tx X ty
        .         .        .                .         .        .              .              .              .          // Entrada: mat, tx, ty, id
        .         .        .                .         .        .              .              .              .          // Saida: mat
        7  (0.0%) 0        0                0         0        0              5  (0.0%)      0              0          {
        .         .        .                .         .        .              .              .              .            // verifica se os valores de tx e ty sÃ£o validos
        2  (0.0%) 0        0                1  (0.0%) 0        0              0              0              0            erroAssert(tx > 0, "Dimensao nula");
        2  (0.0%) 1 (0.1%) 1 (0.1%)         1  (0.0%) 0        0              0              0              0            erroAssert(ty > 0, "Dimensao nula");
        2  (0.0%) 1 (0.1%) 1 (0.1%)         1  (0.0%) 0        0              0              0              0            erroAssert(tx <= MAXTAM, "Dimensao maior que permitido");
        2  (0.0%) 1 (0.1%) 1 (0.1%)         1  (0.0%) 0        0              0              0              0            erroAssert(ty <= MAXTAM, "Dimensao maior que permitido");
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .            // inicializa as dimensoes da matriz
        3  (0.0%) 2 (0.2%) 2 (0.2%)         2  (0.0%) 0        0              1  (0.0%)      1  (0.0%)      1  (0.0%)    mat->tamx = tx;
        3  (0.0%) 0        0                2  (0.0%) 0        0              1  (0.0%)      0              0            mat->tamy = ty;
        .         .        .                .         .        .              .              .              .            // inicializa o identificador da matriz, para rastreamento
        3  (0.0%) 0        0                2  (0.0%) 0        0              1  (0.0%)      0              0            mat->id = id;
        3  (0.0%) 0        0                2  (0.0%) 0        0              0              0              0          }
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .          void inicializaMatrizNula(mat_tipo *mat)
        .         .        .                .         .        .              .              .              .          // Descricao: inicializa mat com valores nulos
        .         .        .                .         .        .              .              .              .          // Entrada: mat
        .         .        .                .         .        .              .              .              .          // Saida: mat
        3  (0.0%) 0        0                0         0        0              2  (0.0%)      0              0          {
        .         .        .                .         .        .              .              .              .            int i, j;
        .         .        .                .         .        .              .              .              .            // inicializa todos os elementos da matriz com 0, por seguranca
    2,404  (0.0%) 1 (0.1%) 1 (0.1%)     1,601  (0.0%) 0        0              1  (0.0%)      0              0            for (i = 0; i < MAXTAM; i++) {
1,923,200  (5.6%) 0        0        1,280,800 (11.5%) 0        0            800  (0.0%)      0              0              for (j = 0; j < MAXTAM; j++) {
8,960,000 (26.3%) 0        0        1,920,000 (17.3%) 0        0        640,000 (17.5%) 80,001 (71.5%) 80,000 (99.5%)        mat->m[i][j] = 0;
        .         .        .                .         .        .              .              .              .              }
        .         .        .                .         .        .              .              .              .            }
        4  (0.0%) 0        0                2  (0.0%) 0        0              0              0              0          }
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .          void inicializaMatrizAleatoria(mat_tipo *mat)
        .         .        .                .         .        .              .              .              .          // Descricao: inicializa mat com valores aleatorios
        .         .        .                .         .        .              .              .              .          // Entrada: mat
        .         .        .                .         .        .              .              .              .          // Saida: mat
        4  (0.0%) 1 (0.1%) 1 (0.1%)         0         0        0              2  (0.0%)      0              0          {
        .         .        .                .         .        .              .              .              .            int i, j;
        .         .        .                .         .        .              .              .              .            // inicializa a matriz com valores nulos, por seguranca
        3  (0.0%) 0        0                1  (0.0%) 0        0              1  (0.0%)      0              0            inicializaMatrizNula(mat);
        .         .        .                .         .        .              .              .              .            // inicializa a parte alocada da matriz com valores aleatorios
    2,506  (0.0%) 1 (0.1%) 1 (0.1%)     2,003  (0.0%) 0        0              1  (0.0%)      1  (0.0%)      0            for (i = 0; i < mat->tamx; i++) {
1,253,000  (3.7%) 1 (0.1%) 1 (0.1%) 1,001,500  (9.0%) 0        0            500  (0.0%)      0              0              for (j = 0; j < mat->tamy; j++) {
4,000,000 (11.7%) 0        0        1,000,000  (9.0%) 1 (0.1%) 1 (0.1%) 500,000 (13.7%) 31,500 (28.1%)      0                mat->m[i][j] = drand48() * INITRANDOMRANGE;
        .         .        .                .         .        .              .              .              .              }
        .         .        .                .         .        .              .              .              .            }
        4  (0.0%) 0        0                2  (0.0%) 0        0              0              0              0          }
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .          double acessaMatriz(mat_tipo *mat)
        .         .        .                .         .        .              .              .              .          // Descricao: acessa mat para fins de registro de acesso
        .         .        .                .         .        .              .              .              .          // Entrada: mat
        .         .        .                .         .        .              .              .              .          // Saida: mat
        .         .        .                .         .        .              .              .              .          {
        .         .        .                .         .        .              .              .              .            int i, j;
        .         .        .                .         .        .              .              .              .            double aux, s = 0.0;
-- line 76 ----------------------------------------
-- line 222 ----------------------------------------
        .         .        .                .         .        .              .              .              .              }
        .         .        .                .         .        .              .              .              .            }
        .         .        .                .         .        .              .              .              .          }
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .          void transpoeMatriz(mat_tipo *a)
        .         .        .                .         .        .              .              .              .          // Descricao: transpoe a matriz a
        .         .        .                .         .        .              .              .              .          // Entrada: a
        .         .        .                .         .        .              .              .              .          // Saida: a
        3  (0.0%) 1 (0.1%) 1 (0.1%)         0         0        0              2  (0.0%)      0              0          {
        .         .        .                .         .        .              .              .              .            int i, j, dim;
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .            // determina a maior dimensao entre tamx e tamy
        7  (0.0%) 1 (0.1%) 1 (0.1%)         4  (0.0%) 0        0              1  (0.0%)      0              0            dim = (a->tamx > a->tamy ? a->tamx : a->tamy);
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .            // faz a transposicao como se a matriz fosse quadrada
    2,005  (0.0%) 1 (0.1%) 1 (0.1%)     1,502  (0.0%) 0        0              1  (0.0%)      0              0            for (i = 0; i < dim; i++) {
  502,500  (1.5%) 0        0          375,750  (3.4%) 0        0            500  (0.0%)      0              0              for (j = i + 1; j < dim; j++) {
        .         .        .                .         .        .              .              .              .                // ELEMSWAP((a->m[i][j]), (a->m[j][i]));
        .         .        .                .         .        .              .              .              .                // LEMEMLOG((long int)(&(a->m[i][j])), sizeof(double), a->id);
        .         .        .                .         .        .              .              .              .                // ESCREVEMEMLOG((long int)(&(a->m[i][j])), sizeof(double), a->id);
        .         .        .                .         .        .              .              .              .              }
        .         .        .                .         .        .              .              .              .            }
        .         .        .                .         .        .              .              .              .            // inverte as dimensoes da matriz transposta
       21  (0.0%) 1 (0.1%) 1 (0.1%)        15  (0.0%) 0        0              3  (0.0%)      0              0            ELEMSWAP(a->tamx, a->tamy);
        3  (0.0%) 0        0                2  (0.0%) 0        0              0              0              0          }
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .          void destroiMatriz(mat_tipo *a)
        .         .        .                .         .        .              .              .              .          // Descricao: destroi a matriz a, que se torna inacessÃ­vel
        .         .        .                .         .        .              .              .              .          // Entrada: a
        .         .        .                .         .        .              .              .              .          // Saida: a
        4  (0.0%) 0        0                0         0        0              2  (0.0%)      0              0          {
        .         .        .                .         .        .              .              .              .            // apenas um aviso se a matriz for destruida mais de uma vez
        8  (0.0%) 1 (0.1%) 1 (0.1%)         4  (0.0%) 0        0              0              0              0            avisoAssert(((a->tamx > 0) && (a->tamy > 0)), "Matriz jÃ¡ foi destruida");
        .         .        .                .         .        .              .              .              .          
        .         .        .                .         .        .              .              .              .            // torna as dimensoes invalidas
       10  (0.0%) 1 (0.1%) 1 (0.1%)         7  (0.0%) 0        0              3  (0.0%)      0              0            a->id = a->tamx = a->tamy = -1;
        3  (0.0%) 0        0                2  (0.0%) 0        0              0              0              0          }

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/elf/dl-lookup.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/elf/dl-lookup.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/drand48-iter.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/drand48.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/drand48.c

--------------------------------------------------------------------------------
-- Annotated source file: /usr/src/debug/glibc/glibc/stdlib/erand48_r.c
--------------------------------------------------------------------------------
Unannotated because one or more of these original files are unreadable:
- /usr/src/debug/glibc/glibc/stdlib/erand48_r.c

--------------------------------------------------------------------------------
-- Annotation summary
--------------------------------------------------------------------------------
Ir________________ I1mr_________ ILmr_________ Dr_______________ D1mr_________ DLmr_________ Dw_______________ D1mw___________ DLmw__________ 

16,645,719 (48.9%)    15  (1.2%)    15  (1.2%) 5,583,207 (50.2%)     1  (0.1%)     1  (0.1%) 1,141,827 (31.2%) 111,503 (99.6%) 80,001 (99.5%)    annotated: files known & above threshold & readable, line numbers known
         0             0             0                 0             0             0                 0               0              0            annotated: files known & above threshold & readable, line numbers unknown
         0             0             0                 0             0             0                 0               0              0          unannotated: files known & above threshold & two or more non-identical
17,058,656 (50.1%)    40  (3.1%)    40  (3.2%) 5,268,154 (47.4%)   367 (21.3%)   265 (20.9%) 2,508,192 (68.6%)      27  (0.0%)     14  (0.0%)  unannotated: files known & above threshold & unreadable 
   120,095  (0.4%) 1,196 (93.4%) 1,169 (93.4%)    24,128  (0.2%) 1,346 (77.9%) 1,000 (79.0%)     7,382  (0.2%)     412  (0.4%)    369  (0.5%)  unannotated: files known & below threshold
   250,236  (0.7%)    29  (2.3%)    28  (2.2%)   250,075  (2.2%)    13  (0.8%)     0                34  (0.0%)       1  (0.0%)      1  (0.0%)  unannotated: files unknown

